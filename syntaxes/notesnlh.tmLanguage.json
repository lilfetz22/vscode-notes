{
  "name": "Notes",
  "scopeName": "source.notesnlh",
  "fileTypes": [
    "notes"
  ],
  "uuid": "b9bf3970-f517-46fd-a7f8-ae78fd761f84",
  "patterns": [
    {
      "comment": "Date Header",
      "name": "keyword.operator.notes",
      "match": "\\[([\\d\\-]+)\\]",
      "captures": {
        "1": {
          "name": "markup.heading.notes"
        }
      }
    },
    {
      "comment": "Action Item High Priority",
      "name": "nothing.notes",
      "match": "(\\[)(\\!)(\\]) (.*)$",
      "captures": {
        "1": {
          "name": "keyword.operator.notes"
        },
        "2": {
          "name": "invalid.deprecated.notes"
        },
        "3": {
          "name": "keyword.operator.notes"
        },
        "4": {
          "name": "invalid.deprecated.notes"
        }
      }
    },
    {
      "comment": "Action Item Done",
      "name": "nothing.notes",
      "match": "(\\[)(âˆš)(\\]) (.*)$",
      "captures": {
        "1": {
          "name": "keyword.operator.notes"
        },
        "2": {
          "name": "markup.changed.notes"
        },
        "3": {
          "name": "keyword.operator.notes"
        },
        "4": {
          "name": "markup.changed.notes"
        }
      }
    },
    {
      "comment": "Action Item Disabled",
      "name": "nothing.notes",
      "match": "(\\[)(x)(\\]) (.*)$",
      "captures": {
        "1": {
          "name": "keyword.operator.notes"
        },
        "2": {
          "name": "markup.canceled.notes"
        },
        "3": {
          "name": "keyword.operator.notes"
        },
        "4": {
          "name": "markup.canceled.notes"
        }
      }
    },
    {
      "comment": "Action Item Empty",
      "name": "nothing.notes",
      "match": "(\\[)(.)(\\]) (.*)$",
      "captures": {
        "1": {
          "name": "keyword.operator.notes"
        },
        "2": {
          "name": "keyword.other.notes"
        },
        "3": {
          "name": "keyword.operator.notes"
        },
        "4": {
          "name": "source.notesnlh"
        }
      }
    },
    {
      "comment": "Ordered bullets",
      "name": "keyword.operator.notes",
      "match": "^[ \\t]*[0-9a-z]+[\\:\\.\\)]\\)?\\s([^,\\.\"'()\\[\\]:]*\\:)?",
      "captures": {
        "1": {
          "name": "keyword.other.notes"
        }
      }
    },
    {
      "comment": "Unordered bullets",
      "name": "variable.language.notes",
      "match": "^[ \\t]*\\-\\s([^,\\.\"'()\\[\\]:]*\\:(?=[\\s]))?",
      "captures": {
        "1": {
          "name": "keyword.other.notes"
        }
      }
    },
    {
      "comment": "Highlights",
      "name": "nothing.notes",
      "match": "(\\#+[^\\#]*\\#*)",
      "captures": {
        "1": {
          "name": "variable.language.notes"
        }
      }
    },
    {
      "comment": "Headers",
      "name": "markup.heading.notes",
      "match": "^([A-Za-z].*\\:)$"
    },
    {
      "comment": "Proper Markdown Headers",
      "name": "markup.heading.notes",
      "match": "^[\\-=]+\\s?\\w[\\w\\s]*[\\-=]+"
    },
    {
      "comment": "Comments",
      "name": "comment.notes",
      "match": "(?<!\\:)(\\/\\/.*)"
    },
    {
      "comment": "Emphasis",
      "name": "keyword.other.notes",
      "match": "(\\*+.*?\\*+)"
    },
    {
      "comment": "Arrows",
      "name": "variable.language.notes",
      "match": "(-+>|=+>|<=+|<-+)"
    },
    {
      "comment": "Single Quotes, as back ticks",
      "name": "string.quoted.single.notes",
      "match": "(\\`[^\\`]*\\`)"
    },
    {
      "comment": "Double Quotes",
      "name": "string.quoted.double.notes",
      "match": "(\\\"[^\\\"]*\\\")"
    },
    {
      "comment": "Warning/critical",
      "name": "invalid.deprecated.notes",
      "match": "(?![a-zA-Z])\\!+[^\\!\\n\\r]+\\!*"
    },
    {
      "comment": "Emphasis on parentheses",
      "name": "keyword.operator.notes",
      "match": "[\\(\\)]"
    },



    {
      "comment": "Actionscript",
      "begin": "(\\[)(actionscript|as)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|actionscript|as))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.actionscript.2"
        }
      ]
    },
    {
      "comment": "Applescript",
      "begin": "(\\[)(applescript)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|applescript))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.applescript"
        }
      ]
    },
    {
      "comment": "ASP",
      "begin": "(\\[)(asp|asa)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|asp|asa))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.asp"
        }
      ]
    },
    {
      "comment": "C",
      "begin": "(\\[)(c)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|c))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.c"
        }
      ]
    },
    {
      "comment": "C#",
      "begin": "(\\[)(cs|c#|csharp)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|cs|c#|csharp))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.cs"
        }
      ]
    },
    {
      "comment": "C++",
      "begin": "(\\[)(c\\+\\+|cpp|cc|cxx)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|c\\+\\+|cpp|cc|cxx))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.c++"
        }
      ]
    },
    {
      "comment": "Clojure",
      "begin": "(\\[)(clj|clojure)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|clj|clojure))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.clojure"
        }
      ]
    },
    {
      "comment": "CSS",
      "begin": "(\\[)(css)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|css))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.css"
        }
      ]
    },
    {
      "comment": "D",
      "begin": "(\\[)(di)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|di))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.d"
        }
      ]
    },
    {
      "comment": "Erlang",
      "begin": "(\\[)(erl|hrl|Emakefile|emakefile|)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|erl|hrl|Emakefile|emakefile|))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.erlang"
        }
      ]
    },
    {
      "comment": "Go",
      "begin": "(\\[)(go|golang)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|go|golang))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.go"
        }
      ]
    },
    {
      "comment": "Groovy",
      "begin": "(\\[)(groovy|gvy)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|groovy|gvy))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.groovy"
        }
      ]
    },
    {
      "comment": "Haskell",
      "begin": "(\\[)(hs|haskell)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|hs|haskell))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.haskell"
        }
      ]
    },
    {
      "comment": "HTML",
      "begin": "(\\[)(html|htm|shtml|xhtml|phtml|inc|tmpl|tpl|ctp)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|html|htm|shtml|xhtml|phtml|inc|tmpl|tpl|ctp))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "text.html.basic"
        }
      ]
    },
    {
      "comment": "Java",
      "begin": "(\\[)(java|bsh)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|java|bsh))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.java"
        }
      ]
    },
    {
      "comment": "Javascript",
      "begin": "(\\[)(js|jsx|htc|javascript)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|js|jsx|htc|javascript))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.js"
        }
      ]
    },
    {
      "comment": "Lua",
      "begin": "(\\[)(lua)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|lua))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.lua"
        }
      ]
    },
    {
      "comment": "Makefile",
      "begin": "(\\[)(gnumakefile|makefile|makefile|ocamlmakefile|make)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|gnumakefile|makefile|makefile|ocamlmakefile|make))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.makefile"
        }
      ]
    },
    {
      "comment": "Markdown",
      "begin": "(\\[)(mdown|markdown|markdn|md)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|mdown|markdown|markdn|md))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "text.html.markdown"
        }
      ]
    },
    {
      "comment": "Matlab",
      "begin": "(\\[)(matlab)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|matlab))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.matlab"
        }
      ]
    },
    {
      "comment": "Objective-c",
      "begin": "(\\[)(objective-c|objc|m|h)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|objective-c|objc|m|h))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.objc"
        }
      ]
    },
    {
      "comment": "Ocaml",
      "begin": "(\\[)(ocaml|ml|mli)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|ocaml|ml|mli))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.ocaml"
        }
      ]
    },
    {
      "comment": "Pascal",
      "begin": "(\\[)(p|pas|pascal)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|p|pas|pascal))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.pascal"
        }
      ]
    },
    {
      "comment": "Perl",
      "begin": "(\\[)(pm|pl|pod|t|perl)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|pm|pl|pod|t|perl))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.perl"
        }
      ]
    },
    {
      "comment": "PHP",
      "begin": "(\\[)(php)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|php))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.php"
        }
      ]
    },
    {
      "comment": "Python",
      "begin": "(\\[)(cpy|py|python|rpy|pyw)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|cpy|py|python|rpy|pyw))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.python"
        }
      ]
    },
    {
      "comment": "R",
      "begin": "(\\[)(r|s|rprofile)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|r|s|rprofile))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.r"
        }
      ]
    },
    {
      "comment": "Regex",
      "begin": "(\\[)(re|regex|regexp)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|re|regex|regexp))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.regexp"
        }
      ]
    },
    {
      "comment": "Ruby",
      "begin": "(\\[)(rb|rbx|rjs|ruby|Rakefile|rake|cgi|fcgi|gemspec|irbrc|capfile|gemfile)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|rb|rbx|rjs|ruby|Rakefile|rake|cgi|fcgi|gemspec|irbrc|capfile|gemfile))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.ruby"
        }
      ]
    },
    {
      "comment": "Scala",
      "begin": "(\\[)(scala)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|scala))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.scala"
        }
      ]
    },
    {
      "comment": "Shell",
      "begin": "(\\[)(sh|bash|zsh|bashrc)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|sh|bash|zsh|bashrc))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.shell"
        }
      ]
    },
    {
      "comment": "SQL",
      "begin": "(\\[)(sql|dml|ddl|mysql)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|sql|dml|ddl|mysql))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.sql"
        }
      ]
    },
    {
      "comment": "TCL",
      "begin": "(\\[)(tcl)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|tcl))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.tcl"
        }
      ]
    },
    {
      "comment": "TeX",
      "begin": "(\\[)(tex|latex|sty|cls)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|tex|latex|sty|cls))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "text.tex"
        }
      ]
    },
    {
      "comment": "XML",
      "begin": "(\\[)(xml|tld|jsp|pt|cpt|dtml|rss|opml)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|xml|tld|jsp|pt|cpt|dtml|rss|opml))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "text.xml"
        }
      ]
    },
    {
      "comment": "YAML",
      "begin": "(\\[)(yaml|yml)(\\])",
      "beginCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "2": {
          "name": "markup.bold.notes"
        },
        "3": {
          "name": "string.regexp.notes"
        }
      },
      "end": "(\\[)(\\\\?\\/?(end|yaml|yml))(\\])",
      "endCaptures": {
        "1": {
          "name": "string.regexp.notes"
        },
        "3": {
          "name": "markup.bold.notes"
        },
        "4": {
          "name": "string.regexp.notes"
        }
      },
      "patterns": [
        {
          "include": "source.yaml"
        }
      ]
    }
  ]
}
